  
<div class="row">
<div disabled class="col s6 m6">
          <div id="someid" class="card disablediv darken-1 ">
            <div style="min-height: 400px;" class="card-content">
              
             <ul class="messages">
		<% if @messages.first != nil %>
			<span class="timestamp">
				<center><%= @messages.first.created_at.to_time.to_s(:short) %> </center>
			</span>		 
		<% else %>
			<span class="timestamp"> 
				<center> <%= Time.now.utc.to_time.to_s(:short) %> </center>
			</span>
		<% end %>	
		<%= render :partial => 'bots/vedicmaths/initial_message' %>
    <%= render :partial => 'messages/message_intent_map' , 
    collection: @messages , :as => :message %>
	</ul>
            </div>
            
          </div>
        </div>
<div class="col s6 m6">
          <div class="card darken-1">
            <div class="card-content">
            <div id="intents_notice">

            </div>
            
              <%= form_for Intent.new , :url => intents_path(Organisation.find(request.params[:id])) , :remote => "true"  do |f| %>


              <%= f.label "Select User Patterns" , :for => "patterns" %>
<%= f.text_area :patterns , :placeholder => 'User responses to be automated' , :onfocus => "allowuserreponses($(this))" , :id => "patterns" %> 

 <%= f.label "Select Responses for User Patterns" , :for => "responses" %>
<%= f.text_area :responses , :placeholder => 'Response to the queries' , :onclick => "bots_response($(this))" , :id => "responses" %> 
<%= f.label "Select Tags" , :for => "tags" %>
     <%= f.text_field :tag , :placeholder => 'Tags Associated' , :id => "tags" , :"data-role" => "materialtags" , :class => "browser-default" %>


<%= f.submit "Save" ,  :class => "btn btn-primary right-align" %>
              <% end %> 
            </div>
            
          </div>
        </div>
</div>

        <div class="right-align" style="margin:15px">
             <%= link_to "Mark chat automated" , user_chat_path(:user_id => 1 , :id =>  1) , :class => "btn btn-primary" %>
              
            </div>

<script type="text/javascript">
  function allowuserreponses(object)
  {
    // console.log(object.val());
    $("#someid").removeClass("disablediv");
    $('.left').each(function(i, obj) {
        $(this).addClass("disablediv");
    });
    $('.right_by_user').each(function(i, obj) {
       $(this).removeClass("disablediv");
       $(this).addClass("clickable");
    });
    $('.full_width').each(function(i, obj) {
        console.log($(obj).text().trim());
        $(obj).addClass("clickable");
        // console.log($(this).text().trim());
        $(obj).unbind( "click");
        $(obj).on("click", function(){ into_tb_user($(obj) , object); });
        // $(obj).click(into_tb($(obj) , object));
    });
  };

  
  function bots_response(object){
     $("#someid").removeClass("disablediv");
     $('.left').each(function(i, obj) {
        $(this).removeClass("disablediv");
        $(this).addClass("clickable");
    });
    $('.right_by_user').each(function(i, obj) {
       $(this).removeClass("clickable");
       $(this).addClass("disablediv");
    });

     $('.left').each(function(i, obj) {
        console.log($(obj).text().trim());
        //$(obj).addClass("clickable");
        // console.log($(this).text().trim());
        console.log($(obj).next(".bot_template"));  
        $(obj).unbind( "click");

        $(obj).on("click", function(){  into_tb_bot(  $(obj).next(".bot_template") , object); });
        // $(obj).click(into_tb($(obj) , object));
    });
  };

  function into_tb_user(k , obj)
  {
    initial_val = obj.val();
    console.log(initial_val.trim());
    if (initial_val.trim())
    {
    final_val = initial_val +  " , " + k.text().trim();
    }
    else {
      final_val = k.text().trim();
    }
    obj.val(final_val);
    k.removeClass("clickable");
    k.addClass("disablediv");
    k.prop('onclick',null).off('click');
  };
  function into_tb_bot(k , obj)
  {
    initial_val = obj.val();
    console.log(initial_val.trim());
    if (initial_val.trim())
    {
    final_val = initial_val +  " , " + k.text().trim();
    }
    else {
      final_val = k.text().trim();
    }
    obj.val(final_val);
    k.prev(".left").removeClass("clickable");
    k.prev(".left").addClass("disablediv");
    k.prev(".left").prop('onclick',null).off('click');
  };
  
 var citynames = new Bloodhound({
            datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
            queryTokenizer: Bloodhound.tokenizers.whitespace,
            prefetch: {
                url: '/users/1/intents',
                filter: function(list) {
                    return $.map(list, function(cityname) {
                        return { name: cityname };
                    });
                }
            }
        });

        citynames.initialize();

        $('#tags').materialtags({
            typeaheadjs: {
                name: 'citynames',
                displayKey: 'name',
                valueKey: 'name',
                source: citynames.ttAdapter()
            }
        });
</script>