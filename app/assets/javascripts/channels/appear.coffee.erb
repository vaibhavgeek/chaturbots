connections = []

addConnection = (id) ->
  connections.push(id)

removeConnection = (id) ->
  index = connections.indexOf(id)
  connections.splice(index, 1) if index > -1

connectedTo = (id) ->
  connections.indexOf(id) > -1

nameclick = (value) ->
  if connectedTo(value) == false
    addConnection(value)
    createconusmer value


visitors = [] 

addvisitor = (id) -> 
  visitors.push(id)

removevisitor = (id) -> 
  index = visitors.indexOf(id)
  visitors.splice(index, 1) if index > -1

visitorpresent = (id) -> 
  visitors.indexOf(id) > -1

window["nameclick"] = nameclick

string = window.location.href 
substring = "/bot/"
if string.indexOf(substring) != -1
  auth_token = string.split("/").pop()
else 
  auth_token = "admin" # this is main admin


org_string = "/"
if string.indexOf(org_string) != -1
  orga_id = string.split(org_string)[4]
if not orga_id?
  orga_id = "3" 

App.appearchannel = App.cable.subscriptions.create { channel: "AppearChannel" , organisation_id: orga_id } ,
  connected: ->
    # Called when the subscription is ready for use on the server

  disconnected: ->
    # Called when the subscription has been terminated by the server

  received: (data) ->
    console.log "from appearchannel"
    console.log data
    if data["online"].toString() == "true"
      if visitorpresent(data["visitor_id"]) == false 
        $("#panel-show-active-members").append data["visitor"]
    else
      $("#"+data["visitor_id"]).remove()
      removevisitor(data["visitor_id"])    
    
    # Called when there's incoming data on the websocket for this channel




createconusmer = (send_params) ->
  App.chatbot = App.cable.subscriptions.create { channel: "ChatbotChannel" , auth_token: send_params },
      connected:  ->
        addConnection(auth_token)
        # Called when the subscription is ready for use on the server

      disconnected: ->
        removeConnection(auth_token)
        # Called when the subscription has been terminated by the server

      received: (data) ->
        console.log "from appearchannel"
        console.log data
        id = '#messages' +  data['auth_token'].trim()
        messages = $(id)
        messages.append data['message']
        messages.animate { scrollTop: messages.prop("scrollHeight") },1000
        
        #  $(".full_width").last().css('background-color' , '#e67e22')

        # Called when there's incoming data on the websocket for this channel

      speak: (data, responder, payload) ->
          @perform 'speak' , message: data , responder: responder , payload: payload 


 
# $("#panel-show-active-members a").click (e) ->
#  console.log "click function"
#  alert "hidden"
#  au = $(this).siblings('.hidden').text().trim()
#  console.log App.chatbot
#  if !App.chatbot
#    console.log "connected to " + au
#    createconusmer au
#  else
#    json = JSON.parse App.chatbot.identifier
#    if json.auth_token != au 
#      console.log "connected to " + au
#      createconusmer au 


  # check_bool = 0
  # $('.hidden').each (i, obj) ->
  #  if value == obj.innerText.trim()
  #   check_bool = check_bool + 1
  #   alert check_bool
  # if check_bool == 1
  #  check_bool = 2
    

# $ -> 
#  $("#ml_check").change ->
#    if ml_check.checked.toString() == "true"
#      $(".chips").show()
#    else 
#      $(".chips").hide()
#    console.log ml_check.checked
