connections = []

addConnection = (id) ->
  connections.push(id)

removeConnection = (id) ->
  index = connections.indexOf(id)
  connections.splice(index, 1) if index > -1

connectedTo = (id) ->
  connections.indexOf(id) > -1

nameclick = (value) ->
  if connectedTo(value) == false
    addConnection(value)
    createconusmer value


visitors = [] 

addvisitor = (id) -> 
  visitors.push(id)

removevisitor = (id) -> 
  index = visitors.indexOf(id)
  visitors.splice(index, 1) if index > -1

visitorpresent = (id) -> 
  visitors.indexOf(id) > -1

window["nameclick"] = nameclick

string = window.location.href 
substring = "/bot/"
if string.indexOf(substring) != -1
  auth_token = string.split("/").pop()
else 
  auth_token = "admin" # this is main admin


org_string = "/"
if string.indexOf(org_string) != -1
  orga_id = string.split(org_string)[4]
if not orga_id?
  orga_id = "1" 

App.appearchannel = App.cable.subscriptions.create { channel: "AppearChannel" , organisation_id: orga_id } ,
  connected: ->
    # Called when the subscription is ready for use on the server

  disconnected: ->
    # Called when the subscription has been terminated by the server

  received: (data) ->
    if data["online"].toString() == "true"
      if visitorpresent(data["visitor_id"]) == false 
        $("#panel-show-active-members").append data["visitor"]
    else
      removevisitor(data["visitor_id"])  
      $("#"+data["visitor_id"]).remove()
      $("#display_chats" + data["organisation_id"]).html data["left_template"]
      $("#appendnav" + data["organisation_id"]).hide()

    
    # Called when there's incoming data on the websocket for this channel




createconusmer = (send_params) ->
  App.chatbot = App.cable.subscriptions.create { channel: "ChatbotChannel" , auth_token: send_params },
      connected:  ->
        addConnection(auth_token)
        # Called when the subscription is ready for use on the server

      disconnected: ->
        removeConnection(auth_token)
        # Called when the subscription has been terminated by the server

      received: (data) ->
        id = '#messages' +  data['auth_token'].trim()
        messages = $(id)
        messages.append data['message']
        messages.animate { scrollTop: messages.prop("scrollHeight") },1000
 
      speak: (data, responder, payload) ->
          @perform 'speak' , message: data , responder: responder , payload: payload 


 